<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.generator.mapper.PurchaseStockMapper">
  <resultMap id="BaseResultMap" type="com.generator.pojo.PurchaseStock">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="stock_id" jdbcType="INTEGER" property="stockId" />
    <result column="order_account" jdbcType="VARCHAR" property="orderAccount" />
    <result column="custom_name" jdbcType="VARCHAR" property="customName" />
    <result column="carton_name" jdbcType="VARCHAR" property="cartonName" />
    <result column="material_science" jdbcType="VARCHAR" property="materialScience" />
    <result column="flute_type" jdbcType="VARCHAR" property="fluteType" />
    <result column="purchase_spec" jdbcType="VARCHAR" property="purchaseSpec" />
    <result column="width_line" jdbcType="VARCHAR" property="widthLine" />
    <result column="line_type" jdbcType="INTEGER" property="lineType" />
    <result column="out_num" jdbcType="INTEGER" property="outNum" />
    <result column="stock_num" jdbcType="INTEGER" property="stockNum" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="fake" jdbcType="INTEGER" property="fake" />
    <result column="reservoir" jdbcType="VARCHAR" property="reservoir" />
    <result column="pallet_number" jdbcType="INTEGER" property="palletNumber" />
    <result column="n" jdbcType="VARCHAR" property="n" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    stock_id, order_account, custom_name, carton_name, material_science, flute_type, 
    purchase_spec, width_line, line_type, out_num, stock_num, price, fake, reservoir, 
    pallet_number, n
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from purchase_stock
    where stock_id = #{stockId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from purchase_stock
    where stock_id = #{stockId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.generator.pojo.PurchaseStock">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into purchase_stock (stock_id, order_account, custom_name, 
      carton_name, material_science, flute_type, 
      purchase_spec, width_line, line_type, 
      out_num, stock_num, price, 
      fake, reservoir, pallet_number, 
      n)
    values (#{stockId,jdbcType=INTEGER}, #{orderAccount,jdbcType=VARCHAR}, #{customName,jdbcType=VARCHAR}, 
      #{cartonName,jdbcType=VARCHAR}, #{materialScience,jdbcType=VARCHAR}, #{fluteType,jdbcType=VARCHAR}, 
      #{purchaseSpec,jdbcType=VARCHAR}, #{widthLine,jdbcType=VARCHAR}, #{lineType,jdbcType=INTEGER}, 
      #{outNum,jdbcType=INTEGER}, #{stockNum,jdbcType=INTEGER}, #{price,jdbcType=DOUBLE}, 
      #{fake,jdbcType=INTEGER}, #{reservoir,jdbcType=VARCHAR}, #{palletNumber,jdbcType=INTEGER}, 
      #{n,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.generator.pojo.PurchaseStock">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into purchase_stock
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stockId != null">
        stock_id,
      </if>
      <if test="orderAccount != null">
        order_account,
      </if>
      <if test="customName != null">
        custom_name,
      </if>
      <if test="cartonName != null">
        carton_name,
      </if>
      <if test="materialScience != null">
        material_science,
      </if>
      <if test="fluteType != null">
        flute_type,
      </if>
      <if test="purchaseSpec != null">
        purchase_spec,
      </if>
      <if test="widthLine != null">
        width_line,
      </if>
      <if test="lineType != null">
        line_type,
      </if>
      <if test="outNum != null">
        out_num,
      </if>
      <if test="stockNum != null">
        stock_num,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="fake != null">
        fake,
      </if>
      <if test="reservoir != null">
        reservoir,
      </if>
      <if test="palletNumber != null">
        pallet_number,
      </if>
      <if test="n != null">
        n,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stockId != null">
        #{stockId,jdbcType=INTEGER},
      </if>
      <if test="orderAccount != null">
        #{orderAccount,jdbcType=VARCHAR},
      </if>
      <if test="customName != null">
        #{customName,jdbcType=VARCHAR},
      </if>
      <if test="cartonName != null">
        #{cartonName,jdbcType=VARCHAR},
      </if>
      <if test="materialScience != null">
        #{materialScience,jdbcType=VARCHAR},
      </if>
      <if test="fluteType != null">
        #{fluteType,jdbcType=VARCHAR},
      </if>
      <if test="purchaseSpec != null">
        #{purchaseSpec,jdbcType=VARCHAR},
      </if>
      <if test="widthLine != null">
        #{widthLine,jdbcType=VARCHAR},
      </if>
      <if test="lineType != null">
        #{lineType,jdbcType=INTEGER},
      </if>
      <if test="outNum != null">
        #{outNum,jdbcType=INTEGER},
      </if>
      <if test="stockNum != null">
        #{stockNum,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="fake != null">
        #{fake,jdbcType=INTEGER},
      </if>
      <if test="reservoir != null">
        #{reservoir,jdbcType=VARCHAR},
      </if>
      <if test="palletNumber != null">
        #{palletNumber,jdbcType=INTEGER},
      </if>
      <if test="n != null">
        #{n,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.generator.pojo.PurchaseStock">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update purchase_stock
    <set>
      <if test="orderAccount != null">
        order_account = #{orderAccount,jdbcType=VARCHAR},
      </if>
      <if test="customName != null">
        custom_name = #{customName,jdbcType=VARCHAR},
      </if>
      <if test="cartonName != null">
        carton_name = #{cartonName,jdbcType=VARCHAR},
      </if>
      <if test="materialScience != null">
        material_science = #{materialScience,jdbcType=VARCHAR},
      </if>
      <if test="fluteType != null">
        flute_type = #{fluteType,jdbcType=VARCHAR},
      </if>
      <if test="purchaseSpec != null">
        purchase_spec = #{purchaseSpec,jdbcType=VARCHAR},
      </if>
      <if test="widthLine != null">
        width_line = #{widthLine,jdbcType=VARCHAR},
      </if>
      <if test="lineType != null">
        line_type = #{lineType,jdbcType=INTEGER},
      </if>
      <if test="outNum != null">
        out_num = #{outNum,jdbcType=INTEGER},
      </if>
      <if test="stockNum != null">
        stock_num = #{stockNum,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="fake != null">
        fake = #{fake,jdbcType=INTEGER},
      </if>
      <if test="reservoir != null">
        reservoir = #{reservoir,jdbcType=VARCHAR},
      </if>
      <if test="palletNumber != null">
        pallet_number = #{palletNumber,jdbcType=INTEGER},
      </if>
      <if test="n != null">
        n = #{n,jdbcType=VARCHAR},
      </if>
    </set>
    where stock_id = #{stockId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.generator.pojo.PurchaseStock">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update purchase_stock
    set order_account = #{orderAccount,jdbcType=VARCHAR},
      custom_name = #{customName,jdbcType=VARCHAR},
      carton_name = #{cartonName,jdbcType=VARCHAR},
      material_science = #{materialScience,jdbcType=VARCHAR},
      flute_type = #{fluteType,jdbcType=VARCHAR},
      purchase_spec = #{purchaseSpec,jdbcType=VARCHAR},
      width_line = #{widthLine,jdbcType=VARCHAR},
      line_type = #{lineType,jdbcType=INTEGER},
      out_num = #{outNum,jdbcType=INTEGER},
      stock_num = #{stockNum,jdbcType=INTEGER},
      price = #{price,jdbcType=DOUBLE},
      fake = #{fake,jdbcType=INTEGER},
      reservoir = #{reservoir,jdbcType=VARCHAR},
      pallet_number = #{palletNumber,jdbcType=INTEGER},
      n = #{n,jdbcType=VARCHAR}
    where stock_id = #{stockId,jdbcType=INTEGER}
  </update>
  <!--<insert id="addPurStockS" parameterType="java.util.List">-->

    <!--<foreach collection="list" item="item" separator=";"  index="index">-->
      <!--insert into purchase_stock (order_account, custom_name, carton_name, material_science, flute_type,-->
      <!--purchase_spec, width_line, line_type, out_num, stock_num, price, fake)-->
      <!--values-->
      <!--(#{item.orderAccount,jdbcType=VARCHAR}, #{item.customName,jdbcType=VARCHAR},-->
      <!--#{item.cartonName,jdbcType=VARCHAR}, #{item.materialScience,jdbcType=VARCHAR}, #{item.fluteType,jdbcType=VARCHAR},-->
      <!--#{item.purchaseSpec,jdbcType=VARCHAR}, #{item.widthLine,jdbcType=VARCHAR}, #{item.lineType,jdbcType=INTEGER},-->
      <!--#{item.outNum,jdbcType=INTEGER}, #{item.stockNum,jdbcType=INTEGER}, #{item.price,jdbcType=DOUBLE},-->
      <!--#{item.fake,jdbcType=INTEGER}) on duplicate key update stock_num=stock_num+#{item.stockNum}-->
    <!--</foreach>-->

  <!--</insert>-->
  <insert id="addPurStockS" parameterType="java.util.List">
    insert into purchase_stock (order_account, custom_name, carton_name, material_science, flute_type,
    purchase_spec, width_line, line_type, out_num, stock_num, price, fake,n)
    values
    <foreach collection="list" item="item" separator=","  index="index">
      (#{item.orderAccount,jdbcType=VARCHAR}, #{item.customName,jdbcType=VARCHAR},
      #{item.cartonName,jdbcType=VARCHAR}, #{item.materialScience,jdbcType=VARCHAR}, #{item.fluteType,jdbcType=VARCHAR},
      #{item.purchaseSpec,jdbcType=VARCHAR}, #{item.widthLine,jdbcType=VARCHAR}, #{item.lineType,jdbcType=INTEGER},
      #{item.outNum,jdbcType=INTEGER}, #{item.stockNum,jdbcType=INTEGER}, #{item.price,jdbcType=DOUBLE},
      #{item.fake,jdbcType=INTEGER},#{item.n,jdbcType=VARCHAR})
    </foreach>
    on duplicate key update stock_num=stock_num+values(stock_num)
  </insert>
  <select id="findByPurStockS" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List" />
    from purchase_stock
    where out_num+n&lt;stock_num and fake=0 order by stock_id desc limit #{cur},#{limit}
  </select>
  <select id="findByPurStockAll" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List" />
    from purchase_stock
    where out_num+n&lt;stock_num and fake=0
  </select>
  <update id="updateByOutNumS" parameterType="java.util.List">
    update purchase_stock
    set out_num=out_num+
    <foreach collection="list" item="item" index="index" separator=" " open="case stock_id" close="end">
      when #{item.stockId} then #{item.outNum}
    </foreach>
    where stock_id in
    <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
      #{item.stockId}
    </foreach>
  </update>
  <select id="findNoByPurStock" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List"/>
    from purchase_stock
    where fake=0  order by stock_id desc limit #{cur},#{limit}
  </select>
  <select id="findNoByPurStockAll" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List"/>
    from purchase_stock
    where fake=0
  </select>
  <update id="updateByEditS" parameterType="java.util.List">
    update purchase_stock
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="price =case" suffix="end,">
        <foreach collection="list" item="item" index="index">
          <if test="item.price!=null">
            when stock_id=#{item.stockId} then #{item.price}
          </if>
        </foreach>
      </trim>
      <trim prefix="out_num =case" suffix="end,">
        <foreach collection="list" item="item" index="index">
          <if test="item.outNum!=null">
            when stock_id=#{item.stockId} then #{item.outNum}
          </if>
        </foreach>
      </trim>
      <trim prefix="n =case" suffix="end,">
        <foreach collection="list" item="item" index="index">
          <if test="item.n!=null">
            when stock_id=#{item.stockId} then #{item.n}
          </if>
        </foreach>
      </trim>
      <trim prefix="stock_num =case" suffix="end,">
        <foreach collection="list" item="item" index="index">
          <if test="item.stockNum!=null">
            when stock_id=#{item.stockId} then #{item.stockNum}
          </if>
        </foreach>
      </trim>
    </trim>
    where stock_id in
    <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
      #{item.stockId}
    </foreach>
  </update>
  <select id="findByPurStockSloan" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List"/>
    from purchase_stock
    <where>
      <if test="orderAccount!=null and orderAccount!=''">
        and order_account = #{orderAccount}
      </if>
      <if test="purchaseSpec!=null and purchaseSpec!=''">
        and material_science=#{purchaseSpec}
      </if>
      <if test="fluteType!=null and fluteType!=''">
        and flute_type=#{fluteType}
      </if>
      <if test="cartonSize!=null and cartonSize!=''">
        and purchase_spec=#{cartonSize}
      </if>
      <if test="minNum!=null and minNum!=''">
        and stock_num&gt;=#{minNum}
      </if>
      <if test="maxNum!=null and maxNum!=''">
        and stock_num&lt;=#{maxNum}
      </if>
      and out_num+n&lt;stock_num and fake=0
    </where>
    order by stock_id desc limit #{cur},#{limit}
  </select>
  <select id="findByPurStockAllloan" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List"/>
    from purchase_stock
    <where>
      <if test="orderAccount!=null and orderAccount!=''">
        and order_account = #{orderAccount}
      </if>
      <if test="purchaseSpec!=null and purchaseSpec!=''">
        and material_science=#{purchaseSpec}
      </if>
      <if test="fluteType!=null and fluteType!=''">
        and flute_type=#{fluteType}
      </if>
      <if test="cartonSize!=null and cartonSize!=''">
        and purchase_spec=#{cartonSize}
      </if>
      <if test="minNum!=null and minNum!=''">
        and stock_num&gt;=#{minNum}
      </if>
      <if test="maxNum!=null and maxNum!=''">
        and stock_num&lt;=#{maxNum}
      </if>
      and out_num+n&lt;stock_num and fake=0
    </where>
  </select>
  <update id="updateByN" parameterType="java.util.List">
      update purchase_stock
      set n=n+
      <foreach collection="list" item="item" separator=" " open="case stock_id" close="end">
          when #{item.stockId} then #{item.n}
      </foreach>
      where stock_id in
      <foreach collection="list" item="item" separator="," close=")" open="(">
          #{item.stockId}
      </foreach>
  </update>
  <select id="findByCarStock" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List" />
    from purchase_stock
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='stockId'">
              and stock_id
            </when>
            <when test="item.field=='orderAccount'">
              and order_account
            </when>
            <when test="item.field=='customName'">
              and custom_name
            </when>
            <when test="item.field=='cartonName'">
              and carton_name
            </when>
            <when test="item.field=='stockNum'">
              and stock_num
            </when>
            <when test="item.field=='outNum'">
              and out_num
            </when>
            <!--<when test="item.field=='n'">-->
              <!--and n-->
            <!--</when>-->
            <when test="item.field=='price'">
              and price
            </when>
            <when test="item.field=='materialScience'">
              and material_science
            </when>
            <when test="item.field=='fluteType'">
              and flute_type
            </when>
            <when test="item.field=='purchaseSpec'">
              and purchase_spec
            </when>
            <when test="item.field=='widthLine'">
              and width_line
            </when>
            <when test="item.field=='lineType'">
              and line_type
            </when>
            <otherwise>
              and n
            </otherwise>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
      and fake=0 and stock_num&gt;out_num+n
    </where>
    order by
    <if test="sort==null or sort==''">
      stock_id desc
    </if>
    <if test="sort!=null and sort!=''">
      <choose>
        <when test="sort=='orderAccount'">
          order_account
        </when>
        <when test="sort=='stockNum'">
          stock_num
        </when>
        <when test="sort=='outNum'">
          out_num
        </when>
        <!--<when test="sort=='n'">-->
          <!--n-->
        <!--</when>-->
        <when test="sort=='price'">
          price
        </when>
        <when test="sort=='purchaseSpec'">
          purchase_spec
        </when>
        <when test="sort=='lineType'">
          line_type
        </when>
        <otherwise>
          n
        </otherwise>
      </choose>
      <choose>
        <when test="order=='ase'">
          asc
        </when>
        <when test="order=='desc'">
          desc
        </when>
      </choose>
    </if>
    limit #{cur},#{rows}
  </select>
  <select id="findByCarStockAll" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List" />
    from purchase_stock
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='stockId'">
              and stock_id
            </when>
            <when test="item.field=='orderAccount'">
              and order_account
            </when>
            <when test="item.field=='customName'">
              and custom_name
            </when>
            <when test="item.field=='cartonName'">
              and carton_name
            </when>
            <when test="item.field=='stockNum'">
              and stock_num
            </when>
            <when test="item.field=='outNum'">
              and out_num
            </when>
            <!--<when test="item.field=='n'">-->
              <!--and n-->
            <!--</when>-->
            <when test="item.field=='price'">
              and price
            </when>
            <when test="item.field=='materialScience'">
              and material_science
            </when>
            <when test="item.field=='fluteType'">
              and flute_type
            </when>
            <when test="item.field=='purchaseSpec'">
              and purchase_spec
            </when>
            <when test="item.field=='widthLine'">
              and width_line
            </when>
            <when test="item.field=='lineType'">
              and line_type
            </when>
            <otherwise>
              and n
            </otherwise>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
      and fake=0
    </where>
  </select>
  <update id="updateByPurFake">
    update purchase_stock
    set fake=1
    where stock_id in
    <foreach collection="list" item="item" open="(" close=")" separator=",">
      #{item.stockId}
    </foreach>
  </update>
  <select id="dropSelectPlace" resultType="com.generator.pojo.PurchaseStock">
    select
    <include refid="Base_Column_List" />
    from purchase_stock
    <where>
      <if test="q != null and q !=''">
        order_account like "%"#{q}"%"
      </if>
      and fake=0
    </where>
  </select>
</mapper>