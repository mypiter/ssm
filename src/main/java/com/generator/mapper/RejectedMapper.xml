<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.generator.mapper.RejectedMapper">
  <resultMap id="BaseResultMap" type="com.generator.pojo.Rejected">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="rejected_id" jdbcType="INTEGER" property="rejectedId" />
    <result column="order_account" jdbcType="VARCHAR" property="orderAccount" />
    <result column="delivery_number" jdbcType="VARCHAR" property="deliveryNumber" />
    <result column="rejected_product" jdbcType="VARCHAR" property="rejectedProduct" />
    <result column="oder_num" jdbcType="INTEGER" property="oderNum" />
    <result column="rejected_spec" jdbcType="VARCHAR" property="rejectedSpec" />
    <result column="material_name" jdbcType="VARCHAR" property="materialName" />
    <result column="pit_type" jdbcType="VARCHAR" property="pitType" />
    <result column="rejected_num" jdbcType="INTEGER" property="rejectedNum" />
    <result column="rejected_time" jdbcType="TIMESTAMP" property="rejectedTime" />
    <result column="rejected_type" jdbcType="INTEGER" property="rejectedType" />
    <result column="compensate_type" jdbcType="INTEGER" property="compensateType" />
    <result column="compensate_money" jdbcType="DOUBLE" property="compensateMoney" />
    <result column="compensate_time" jdbcType="TIMESTAMP" property="compensateTime" />
    <result column="rejected_company" jdbcType="VARCHAR" property="rejectedCompany" />
    <result column="carton_price" jdbcType="DOUBLE" property="cartonPrice" />
    <result column="all_price" jdbcType="DOUBLE" property="allPrice" />
    <result column="refill_num" jdbcType="INTEGER" property="refillNum" />
    <result column="rejected_remarks" jdbcType="VARCHAR" property="rejectedRemarks" />
    <result column="fake" jdbcType="INTEGER" property="fake" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    rejected_id, order_account, delivery_number, rejected_product, oder_num, rejected_spec, refill_num,
    material_name, pit_type, rejected_num, rejected_time, rejected_type, compensate_type, 
    compensate_money, compensate_time, rejected_company, carton_price, all_price, rejected_remarks, 
    fake
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />,(select c.consignee from carton_out_info c where c.delivery_number=r.delivery_number) as customName
    from rejected r
    where r.rejected_id = #{rejectedId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from rejected
    where rejected_id = #{rejectedId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.generator.pojo.Rejected">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into rejected (rejected_id, order_account, delivery_number, 
      rejected_product, oder_num, rejected_spec, 
      material_name, pit_type, rejected_num, 
      rejected_time, rejected_type, compensate_type, 
      compensate_money, compensate_time, rejected_company, 
      carton_price, all_price, rejected_remarks, 
      fake)
    values (#{rejectedId,jdbcType=INTEGER}, #{orderAccount,jdbcType=VARCHAR}, #{deliveryNumber,jdbcType=VARCHAR}, 
      #{rejectedProduct,jdbcType=VARCHAR}, #{oderNum,jdbcType=INTEGER}, #{rejectedSpec,jdbcType=VARCHAR}, 
      #{materialName,jdbcType=VARCHAR}, #{pitType,jdbcType=VARCHAR}, #{rejectedNum,jdbcType=INTEGER}, 
      #{rejectedTime,jdbcType=TIMESTAMP}, #{rejectedType,jdbcType=INTEGER}, #{compensateType,jdbcType=INTEGER}, 
      #{compensateMoney,jdbcType=DOUBLE}, #{compensateTime,jdbcType=TIMESTAMP}, #{rejectedCompany,jdbcType=VARCHAR}, 
      #{cartonPrice,jdbcType=DOUBLE}, #{allPrice,jdbcType=DOUBLE}, #{rejectedRemarks,jdbcType=VARCHAR}, 
      #{fake,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.generator.pojo.Rejected">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into rejected
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="rejectedId != null">
        rejected_id,
      </if>
      <if test="orderAccount != null">
        order_account,
      </if>
      <if test="deliveryNumber != null">
        delivery_number,
      </if>
      <if test="rejectedProduct != null">
        rejected_product,
      </if>
      <if test="oderNum != null">
        oder_num,
      </if>
      <if test="refillNum != null">
        refill_num,
      </if>
      <if test="rejectedSpec != null">
        rejected_spec,
      </if>
      <if test="materialName != null">
        material_name,
      </if>
      <if test="pitType != null">
        pit_type,
      </if>
      <if test="rejectedNum != null">
        rejected_num,
      </if>
      <if test="rejectedTime != null">
        rejected_time,
      </if>
      <if test="rejectedType != null">
        rejected_type,
      </if>
      <if test="compensateType != null">
        compensate_type,
      </if>
      <if test="compensateMoney != null">
        compensate_money,
      </if>
      <if test="compensateTime != null">
        compensate_time,
      </if>
      <if test="rejectedCompany != null">
        rejected_company,
      </if>
      <if test="cartonPrice != null">
        carton_price,
      </if>
      <if test="allPrice != null">
        all_price,
      </if>
      <if test="rejectedRemarks != null">
        rejected_remarks,
      </if>
      <if test="fake != null">
        fake,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="rejectedId != null">
        #{rejectedId,jdbcType=INTEGER},
      </if>
      <if test="orderAccount != null">
        #{orderAccount,jdbcType=VARCHAR},
      </if>
      <if test="deliveryNumber != null">
        #{deliveryNumber,jdbcType=VARCHAR},
      </if>
      <if test="rejectedProduct != null">
        #{rejectedProduct,jdbcType=VARCHAR},
      </if>
      <if test="oderNum != null">
        #{oderNum,jdbcType=INTEGER},
      </if>
      <if test="refillNum != null">
        #{refillNum,jdbcType=INTEGER},
      </if>
      <if test="rejectedSpec != null">
        #{rejectedSpec,jdbcType=VARCHAR},
      </if>
      <if test="materialName != null">
        #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="pitType != null">
        #{pitType,jdbcType=VARCHAR},
      </if>
      <if test="rejectedNum != null">
        #{rejectedNum,jdbcType=INTEGER},
      </if>
      <if test="rejectedTime != null">
        #{rejectedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectedType != null">
        #{rejectedType,jdbcType=INTEGER},
      </if>
      <if test="compensateType != null">
        #{compensateType,jdbcType=INTEGER},
      </if>
      <if test="compensateMoney != null">
        #{compensateMoney,jdbcType=DOUBLE},
      </if>
      <if test="compensateTime != null">
        #{compensateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectedCompany != null">
        #{rejectedCompany,jdbcType=VARCHAR},
      </if>
      <if test="cartonPrice != null">
        #{cartonPrice,jdbcType=DOUBLE},
      </if>
      <if test="allPrice != null">
        #{allPrice,jdbcType=DOUBLE},
      </if>
      <if test="rejectedRemarks != null">
        #{rejectedRemarks,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        #{fake,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.generator.pojo.Rejected">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update rejected
    <set>
      <if test="orderAccount != null">
        order_account = #{orderAccount,jdbcType=VARCHAR},
      </if>
      <if test="deliveryNumber != null">
        delivery_number = #{deliveryNumber,jdbcType=VARCHAR},
      </if>
      <if test="rejectedProduct != null">
        rejected_product = #{rejectedProduct,jdbcType=VARCHAR},
      </if>
      <if test="oderNum != null">
        oder_num = #{oderNum,jdbcType=INTEGER},
      </if>
      <if test="refillNum != null">
        refill_num = #{refillNum,jdbcType=INTEGER},
      </if>
      <if test="rejectedSpec != null">
        rejected_spec = #{rejectedSpec,jdbcType=VARCHAR},
      </if>
      <if test="materialName != null">
        material_name = #{materialName,jdbcType=VARCHAR},
      </if>
      <if test="pitType != null">
        pit_type = #{pitType,jdbcType=VARCHAR},
      </if>
      <if test="rejectedNum != null">
        rejected_num = #{rejectedNum,jdbcType=INTEGER},
      </if>
      <if test="rejectedTime != null">
        rejected_time = #{rejectedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectedType != null">
        rejected_type = #{rejectedType,jdbcType=INTEGER},
      </if>
      <if test="compensateType != null">
        compensate_type = #{compensateType,jdbcType=INTEGER},
      </if>
      <if test="compensateMoney != null">
        compensate_money = #{compensateMoney,jdbcType=DOUBLE},
      </if>
      <if test="compensateTime != null">
        compensate_time = #{compensateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectedCompany != null">
        rejected_company = #{rejectedCompany,jdbcType=VARCHAR},
      </if>
      <if test="cartonPrice != null">
        carton_price = #{cartonPrice,jdbcType=DOUBLE},
      </if>
      <if test="allPrice != null">
        all_price = #{allPrice,jdbcType=DOUBLE},
      </if>
      <if test="rejectedRemarks != null">
        rejected_remarks = #{rejectedRemarks,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        fake = #{fake,jdbcType=INTEGER},
      </if>
    </set>
    where rejected_id = #{rejectedId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.generator.pojo.Rejected">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update rejected
    set order_account = #{orderAccount,jdbcType=VARCHAR},
      delivery_number = #{deliveryNumber,jdbcType=VARCHAR},
      rejected_product = #{rejectedProduct,jdbcType=VARCHAR},
      oder_num = #{oderNum,jdbcType=INTEGER},
      rejected_spec = #{rejectedSpec,jdbcType=VARCHAR},
      material_name = #{materialName,jdbcType=VARCHAR},
      pit_type = #{pitType,jdbcType=VARCHAR},
      rejected_num = #{rejectedNum,jdbcType=INTEGER},
      rejected_time = #{rejectedTime,jdbcType=TIMESTAMP},
      rejected_type = #{rejectedType,jdbcType=INTEGER},
      compensate_type = #{compensateType,jdbcType=INTEGER},
      compensate_money = #{compensateMoney,jdbcType=DOUBLE},
      compensate_time = #{compensateTime,jdbcType=TIMESTAMP},
      rejected_company = #{rejectedCompany,jdbcType=VARCHAR},
      carton_price = #{cartonPrice,jdbcType=DOUBLE},
      all_price = #{allPrice,jdbcType=DOUBLE},
      rejected_remarks = #{rejectedRemarks,jdbcType=VARCHAR},
      fake = #{fake,jdbcType=INTEGER}
    where rejected_id = #{rejectedId,jdbcType=INTEGER}
  </update>

  <select id="select"  resultType="com.generator.pojo.Rejected">
    select
    <include refid="Base_Column_List" />
    from rejected
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='rejectedId'">
              and rejected_id
            </when>
            <when test="item.field=='orderAccount'">
              and order_account
            </when>
            <when test="item.field=='deliveryNumber'">
              and delivery_number
            </when>
            <when test="item.field=='rejectedProduct'">
              and rejected_product
            </when>
            <when test="item.field=='oderNum'">
              and oderNum
            </when>
            <when test="item.field=='rejectedNum'">
              and rejected_num
            </when>
            <when test="item.field=='rejectedTime'">
              and rejected_time
            </when>
            <when test="item.field=='compensateType'">
              and compensate_type
            </when>
            <when test="item.field=='refillNum'">
              and refill_num
            </when>
            <when test="item.field=='compensateMoney'">
              and compensate_money
            </when>
            <when test="item.field=='compensateTime'">
              and compensate_time
            </when>
            <when test="item.field=='rejectedCompany'">
              and rejected_company
            </when>
            <when test="item.field=='cartonPrice'">
              and carton_price
            </when>
            <when test="item.field=='allPrice'">
              and all_price
            </when>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
    </where>
    <if test="sort!=null and sort!=''">
    order by
    <choose>
      <when test="sort=='rejectedId'">
        rejected_id
      </when>
      <when test="sort=='orderAccount'">
        order_account
      </when>
      <when test="sort=='deliveryNumber'">
        delivery_number
      </when>
      <when test="item.field=='rejectedProduct'">
        rejected_product
      </when>
      <when test="sort=='oderNum'">
        oderNum
      </when>
      <when test="sort=='rejectedNum'">
        rejected_num
      </when>
      <when test="sort=='rejectedTime'">
        rejected_time
      </when>
      <when test="sort=='compensateType'">
        compensate_type
      </when>
      <when test="sort=='refillNum'">
        refill_num
      </when>
      <when test="sort=='compensateMoney'">
        compensate_money
      </when>
      <when test="sort=='compensateTime'">
        compensate_time
      </when>
      <when test="sort=='rejectedCompany'">
        rejected_company
      </when>
      <when test="sort=='cartonPrice'">
        carton_price
      </when>
      <when test="sort=='allPrice'">
        all_price
      </when>
    </choose>
      <choose>
        <when test="order=='ase'">
          asc
        </when>
        <when test="order=='desc'">
          desc
        </when>
      </choose>
    </if>
    limit #{cur},#{rows}
  </select>
  <select id="selectAll"  resultType="com.generator.pojo.Rejected">
    select
    <include refid="Base_Column_List" />
    from rejected
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='rejectedId'">
              and rejected_id
            </when>
            <when test="item.field=='orderAccount'">
              and order_account
            </when>
            <when test="item.field=='deliveryNumber'">
              and delivery_number
            </when>
            <when test="item.field=='rejectedProduct'">
              and rejected_product
            </when>
            <when test="item.field=='oderNum'">
              and oderNum
            </when>
            <when test="item.field=='rejectedNum'">
              and rejected_num
            </when>
            <when test="item.field=='rejectedTime'">
              and rejected_time
            </when>
            <when test="item.field=='compensateType'">
              and compensate_type
            </when>
            <when test="item.field=='refillNum'">
              and refill_num
            </when>
            <when test="item.field=='compensateMoney'">
              and compensate_money
            </when>
            <when test="item.field=='compensateTime'">
              and compensate_time
            </when>
            <when test="item.field=='rejectedCompany'">
              and rejected_company
            </when>
            <when test="item.field=='cartonPrice'">
              and carton_price
            </when>
            <when test="item.field=='allPrice'">
              and all_price
            </when>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
    </where>
  </select>
</mapper>