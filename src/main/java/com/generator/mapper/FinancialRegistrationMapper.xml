<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.generator.mapper.FinancialRegistrationMapper">
  <resultMap id="BaseResultMap" type="com.generator.pojo.FinancialRegistration">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="financial_registration_id" jdbcType="INTEGER" property="financialRegistrationId" />
    <result column="finance_money" jdbcType="DOUBLE" property="financeMoney" />
    <result column="finance_people" jdbcType="VARCHAR" property="financePeople" />
    <result column="finance_register" jdbcType="VARCHAR" property="financeRegister" />
    <result column="finance_date" jdbcType="VARCHAR" property="financeDate" />
    <result column="finance_price" jdbcType="DOUBLE" property="financePrice" />
    <result column="finance_num" jdbcType="INTEGER" property="financeNum" />
    <result column="finance_remarks" jdbcType="VARCHAR" property="financeRemarks" />
    <result column="fake" jdbcType="INTEGER" property="fake" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    financial_registration_id, finance_money, finance_people, finance_register, finance_date,
    finance_price, finance_num, finance_remarks, fake
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from financial_registration
    where financial_registration_id = #{financialRegistrationId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from financial_registration
    where financial_registration_id = #{financialRegistrationId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.generator.pojo.FinancialRegistration">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into financial_registration (financial_registration_id, finance_money, 
      finance_people, finance_register, finance_date, 
      finance_price, finance_num, finance_remarks, 
      fake)
    values (#{financialRegistrationId,jdbcType=INTEGER}, #{financeMoney,jdbcType=DOUBLE}, 
      #{financePeople,jdbcType=VARCHAR}, #{financeRegister,jdbcType=VARCHAR}, #{financeDate,jdbcType=VARCHAR}, 
      #{financePrice,jdbcType=DOUBLE}, #{financeNum,jdbcType=INTEGER}, #{financeRemarks,jdbcType=VARCHAR}, 
      #{fake,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.generator.pojo.FinancialRegistration">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into financial_registration
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="financialRegistrationId != null">
        financial_registration_id,
      </if>
      <if test="financeMoney != null">
        finance_money,
      </if>
      <if test="financePeople != null">
        finance_people,
      </if>
      <if test="financeRegister != null">
        finance_register,
      </if>
      <if test="financeDate != null">
        finance_date,
      </if>
      <if test="financePrice != null">
        finance_price,
      </if>
      <if test="financeNum != null">
        finance_num,
      </if>
      <if test="financeRemarks != null">
        finance_remarks,
      </if>
      <if test="fake != null">
        fake,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="financialRegistrationId != null">
        #{financialRegistrationId,jdbcType=INTEGER},
      </if>
      <if test="financeMoney != null">
        #{financeMoney,jdbcType=DOUBLE},
      </if>
      <if test="financePeople != null">
        #{financePeople,jdbcType=VARCHAR},
      </if>
      <if test="financeRegister != null">
        #{financeRegister,jdbcType=VARCHAR},
      </if>
      <if test="financeDate != null">
        #{financeDate,jdbcType=VARCHAR},
      </if>
      <if test="financePrice != null">
        #{financePrice,jdbcType=DOUBLE},
      </if>
      <if test="financeNum != null">
        #{financeNum,jdbcType=INTEGER},
      </if>
      <if test="financeRemarks != null">
        #{financeRemarks,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        #{fake,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.generator.pojo.FinancialRegistration">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update financial_registration
    <set>
      <if test="financeMoney != null">
        finance_money = #{financeMoney,jdbcType=DOUBLE},
      </if>
      <if test="financePeople != null">
        finance_people = #{financePeople,jdbcType=VARCHAR},
      </if>
      <if test="financeRegister != null">
        finance_register = #{financeRegister,jdbcType=VARCHAR},
      </if>
      <if test="financeDate != null">
        finance_date = #{financeDate,jdbcType=VARCHAR},
      </if>
      <if test="financePrice != null">
        finance_price = #{financePrice,jdbcType=DOUBLE},
      </if>
      <if test="financeNum != null">
        finance_num = #{financeNum,jdbcType=INTEGER},
      </if>
      <if test="financeRemarks != null">
        finance_remarks = #{financeRemarks,jdbcType=VARCHAR},
      </if>
      <if test="fake != null">
        fake = #{fake,jdbcType=INTEGER},
      </if>
    </set>
    where financial_registration_id = #{financialRegistrationId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.generator.pojo.FinancialRegistration">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update financial_registration
    set finance_money = #{financeMoney,jdbcType=DOUBLE},
      finance_people = #{financePeople,jdbcType=VARCHAR},
      finance_register = #{financeRegister,jdbcType=VARCHAR},
      finance_date = #{financeDate,jdbcType=VARCHAR},
      finance_price = #{financePrice,jdbcType=DOUBLE},
      finance_num = #{financeNum,jdbcType=INTEGER},
      finance_remarks = #{financeRemarks,jdbcType=VARCHAR},
      fake = #{fake,jdbcType=INTEGER}
    where financial_registration_id = #{financialRegistrationId,jdbcType=INTEGER}
  </update>

  <select id="select" resultType="com.generator.pojo.FinancialRegistration">
    select
    <include refid="Base_Column_List" />
    from financial_registration
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='financialRegistrationId'">
              and financial_registration_id
            </when>
            <when test="item.field=='financeMoney'">
              and finance_money
            </when>
            <when test="item.field=='financePeople'">
              and finance_people
            </when>
            <when test="item.field=='financeRegister'">
              and finance_register
            </when>
            <when test="item.field=='financeDate'">
              and finance_date
            </when>
            <when test="item.field=='financePrice'">
              and finance_price
            </when>
            <when test="item.field=='financeNum'">
              and finance_num
            </when>
            <when test="item.field=='financeRemarks'">
              and finance_remarks
            </when>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
      <!--<if test="startTime!=null and startTime!=''">
        and payment_time&gt;=#{startTime}
      </if>
      <if test="endTime!=null and endTime!=''">
        and payment_time&lt;=#{endTime}
      </if>-->
      and fake=0
    </where>
    <if test="sort!=null and sort!=''">
      order by
      <choose>
        <when test="sort=='financialRegistrationId'">
          financial_registration_id
        </when>
        <when test="sort=='financeMoney'">
          finance_money
        </when>
        <when test="sort=='financePeople'">
          finance_people
        </when>
        <when test="sort=='financeRegister'">
          finance_register
        </when>
        <when test="sort=='financeDate'">
          finance_date
        </when>
        <when test="sort=='financePrice'">
          finance_price
        </when>
        <when test="sort=='financeNum'">
          finance_num
        </when>
        <when test="sort=='financeRemarks'">
          finance_remarks
        </when>
      </choose>
      <choose>
        <when test="order=='ase'">
          asc
        </when>
        <when test="order=='desc'">
          desc
        </when>
      </choose>
    </if>
    limit #{cur},#{rows}
  </select>
  <select id="selectAll" resultType="com.generator.pojo.FinancialRegistration">
    select
    <include refid="Base_Column_List" />
    from financial_registration
    <where>
      <if test="list!=null">
        <foreach collection="list" item="item" separator=",">
          <choose>
            <when test="item.field=='financialRegistrationId'">
              and financial_registration_id
            </when>
            <when test="item.field=='financeMoney'">
              and finance_money
            </when>
            <when test="item.field=='financePeople'">
              and finance_people
            </when>
            <when test="item.field=='financeRegister'">
              and finance_register
            </when>
            <when test="item.field=='financeDate'">
              and finance_date
            </when>
            <when test="item.field=='financePrice'">
              and finance_price
            </when>
            <when test="item.field=='financeNum'">
              and finance_num
            </when>
            <when test="item.field=='financeRemarks'">
              and finance_remarks
            </when>
          </choose>
          <choose>
            <when test="item.op=='contains'">
              like "%"#{item.value}"%"
            </when>
            <when test="item.op=='equal'">
              =#{item.value}
            </when>
            <when test="item.op=='notequal'">
              &lt;&gt;#{item.value}
            </when>
            <when test="item.op=='greater'">
              &gt;#{item.value}
            </when>
            <when test="item.op=='greaterorequal'">
              &gt;=#{item.value}
            </when>
            <when test="item.op=='less'">
              &lt;#{item.value}
            </when>
            <when test="item.op=='lessorequal'">
              &lt;=#{item.value}
            </when>
            <when test="item.op=='beginwith'">
              like #{item.value}"%"
            </when>
            <when test="item.op=='endwith'">
              like "%"#{item.value}
            </when>
          </choose>
        </foreach>
      </if>
      <!--<if test="startTime!=null and startTime!=''">
        and payment_time&gt;=#{startTime}
      </if>
      <if test="endTime!=null and endTime!=''">
        and payment_time&lt;=#{endTime}
      </if>-->
      and fake=0
    </where>
  </select>
</mapper>